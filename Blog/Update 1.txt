This project is a little bit amorphous as I discover my skills both in Unity and Max/MSP and balance what I am able to accomplish with the time that I have allotted. The current goal of the project is to make a simple video game thats primary purpose is the making of music by how the character interacts with its surroundings. This music will be generated in Max/MSP which is also creating backing music based on character movements and habits that will be tracked. 

The first piece of the puzzle that I approached is the connection between Unity and Max/MSP. The first technique to accomplish this that I discovered was a toolkit called [myu] (the Max Unity Interoperability Toolkit) (http://cycling74.com/forums/topic/ann-myu-max-unity-interoperability-toolkit-v-1-0-released/) (http://disis.music.vt.edu/main/portfolio.php) from the Digital Interactive Sound & Intermedia Studio at Virginia Tech. This toolkit enables two way communication and control of a vast number of parameter in both programs over a TCP/IP connection. This is in line with what I was looking for, but I did not need the complexity, bandwidth, or even bidirectional communication that this approach offered, so I continued to look for a more simple approach. 

After some research, I found the project by Yiannis Ioannides (http://gameaudiomiddleware.tumblr.com) who was creating a project for a senior project at Berklee that would add precomposed sections to the soundtrack based on the sound energy levels in the game. This would have the effect of dynamically increasing the intensity of the music to match the intensity of the gameplay as a technique to immerse the player further in the game. He sent parameters from Unity over a UDP connection to Max/MSP, which would play music based on the data it received. 

This idea (at least in the Unity/Max connection) was similar enough to mine that I read further. After exploring his ideas, I realized that I can do something similar to what he did with a very simple UDP server created in Unity that is connected to Max/MSP. He details fully how he went through everything in Unity so that is pretty easy to follow. I used the project that he made to test the idea in my own setup and see if it was viable method of communication.

On the Max/MSP side, the standard piece used for UDP communication is the [udpreceive] object. I tried to use this, but kept getting an error upon receipt of a data packet. Reading into the error, I learned that the [udpreceive] object is geared primarily toward OSC (open sound control - the potential next step from MIDI) communication and didn't like any data that was not an OSC packet. Upon digging deeper in the Max documentation, I discovered the [mxj net.udprecv] object which uses Java (mxj allows Max to use Java programs) to receive UDP communication. This method worked!

For the final step, now that I have communication established between the two programs, I wanted to keep my project in Github so that it would be open to anyone who wanted to copy it, play with it, try it, or just watch would be able to. I knew from my video game class that Unity and Github don't play super well together off the cuff that I needed to make some adjustments. Thanks to the advice at (http://docs.unity3d.com/Documentation/Manual/ExternalVersionControlSystemSupport.html), I was able to make the adjustments (changing how Unity manages the metafiles) and I used the same .gitignore file that my team was to ignore the unnecessary files (also detailed in the article). 